var express = require('express');
var router = express.Router();

/* GET users listing. */
router.get('/nbextensions_configurator/list', function(req, res, next) {
	res.json([{
		Type: "IPython Notebook Extension",
		Name: "AddBefore",
		Description: "This extension enables the Add Cell before button (from iPython 1)",
		Link: "readme.md",
		Icon: "icon.png",
		Main: "main.js",
		Compatibility: "4.x",
		require: "addbefore/main",
		Section: "notebook",
		readme: "addbefore/readme.md",
		icon: "addbefore/icon.png"
	},{
		Type: "IPython Notebook Extension",
		Compatibility: "3.x, 4.x, 5.x",
		Name: "AutoSaveTime",
		Main: "main.js",
		Icon: "icon.png",
		Link: "README.md",
		Description: "Optionally set the notebook autosave interval, and/or add a selector to the toolbar to set it",
		Parameters: [{
			name: "autosavetime_set_starting_interval",
			description: "Set an autosave interval on notebook load. If false, the default is unchanged.",
			input_type: "checkbox",
			default: false
		}, {
			name: "autosavetime_starting_interval",
			description: "Autosave interval (in minutes) which would be set on notebook load.",
			input_type: "number",
			min: 0,
			step: 1,
			default: 2
		}, {
			name: "autosavetime_show_selector",
			description: "add a selector to the toolbar to change the autosave interval",
			input_type: "checkbox",
			default: true
		}],
		require: "autosavetime/main",
		Section: "notebook",
		readme: "autosavetime/README.md",
		icon: "autosavetime/icon.png"
	},{
		Type: "IPython Notebook Extension",
		Compatibility: "3.x, 4.x",
		Name: "Autoscroll",
		Main: "main.js",
		Icon: "icon.png",
		Link: "README.md",
		Description: "Optionally set the output autoscroll threshold, and/or add a selector to the toolbar to set it, and/or add a toolbar button to enable/disable it",
		Parameters: [{
			name: "autoscroll_set_on_load",
			description: "Set an autoscroll threshold on notebook load. If false, the default is unchanged.",
			input_type: "checkbox",
			default: false
		},{
			name: "autoscroll_starting_threshold",
			description: "Autoscroll threshold which would be set on notebook load. -1 disables autoscrolling.",
			input_type: "number",
			min: -1,
			step: 1,
			default: 100
		},{
			name: "autoscroll_show_selector",
			description: "add a selector to the toolbar to change the autoscroll threshold",
			input_type: "checkbox",
			default: true
		}, {
			name: "autoscroll_show_button",
			description: "add a button to the toolbar to disable/enable autoscrolling",
			input_type: "checkbox",
			default: false
		}],
		require: "autoscroll/main",
		Section: "notebook",
		readme: "autoscroll/README.md",
		icon: "autoscroll/icon.png"
	},{
		Type: "Jupyter Notebook Extension",
		Compatibility: "4.x, 5.x",
		Name: "Cell Filter",
		Main: "cell_filter.js",
		Link: "README.md",
		Description: "An extension that allows you to filter cells by tags. Keywords entered into the search bar separated by spaces joins them with logical AND.\n",
		require: "cell_filter/cell_filter",
		Section: "notebook",
		readme: "cell_filter/README.md"
	},{
		Type: "IPython Notebook Extension",
		Name: "Code Font Size",
		Link: "README.md",
		Description: "Adds toolbar buttons to increase and decrease code's font size. This is useful, for example, when projecting the notebook.",
		Main: "code_font_size.js",
		Compatibility: "4.x, 5.x",
		require: "code_font_size/code_font_size",
		Section: "notebook",
		readme: "code_font_size/README.md"
	},{
		Type: "Jupyter Notebook Extension",
		Name: "2to3 Converter",
		"Description": "Converts python2 code in a notebook's code cell to python3 code",
		"Link": "README_2to3.md",
		"Main": "2to3.js",
		"Compatibility": "Jupyter 4.x, 5.x",
		"Parameters": [
			{"name": "2to3.add_toolbar_button", "description": "Add a toolbar button to convert the selected cell(s)", "input_type": "checkbox", "default": true},
			{"name": "2to3.button_icon", "description": "Toolbar button icon: a font-awesome class defining the icon used for the\ntoolbar button. See https://fontawesome.com/icons for available icons.\n", "input_type": "text", "default": "fa-space-shuttle"},
			{"name": "2to3.button_label", "description": "Toolbar button label text", "input_type": "text", "default": "Code converter"},
			{"name": "2to3.register_hotkey", "description": "Register a hotkey to convert the selected cell(s)", "input_type": "checkbox", "default": true},
			{"name": "2to3.hotkeys.process_selected", "description": "Hotkey to convert the selected cell(s) from python2 to python3", "input_type": "hotkey", "default": "Ctrl-M"},
			{"name": "2to3.hotkeys.process_all", "description": "Hotkey to convert the whole notebook", "input_type": "hotkey", "default": "Ctrl-Shift-M"},
			{"name": "2to3.show_alerts_for_errors", "description": "Show alerts for errors in the kernel converting calls", "input_type": "checkbox", "default": true},
			{"name": "2to3.kernel_config_map_json",
			 "description": "kernel_config_map_json:\njson defining library calls required to load the kernel-specific\nconverting modules, and the prefix & postfix for the json-format string\nrequired to make the converting call.\n",
			 "input_type": "textarea",
			 "default": "{\n  \"python\": {\n    \"library\": \"import lib2to3.refactor, json\\n_2to3_refactoring_tool = lib2to3.refactor.RefactoringTool(\\n    set(lib2to3.refactor.get_fixers_from_package('lib2to3.fixes')))\\ndef _2to3_refactor_cell(src):\\n    try:\\n        tree = _2to3_refactoring_tool.refactor_string(src+'\\\\n', '<dummy_name>')\\n    except (lib2to3.pgen2.parse.ParseError, lib2to3.pgen2.tokenize.TokenError):\\n        return src \\n    else:\\n        return str(tree)[:-1]\",\n    \"prefix\": \"print(json.dumps(refactor_cell(u\",\n    \"postfix\": \")))\"\n  }\n}\n"}],
		"require": "code_prettify/2to3", "Section": "notebook", "readme": "code_prettify/README_2to3.md"
	},{
		"Type": "Jupyter Notebook Extension",
		"Name": "Autopep8", "Description": "Use kernel-specific code to reformat/prettify the contents of code cells", "Link": "README_autopep8.md", "Main": "autopep8.js", "Compatibility": "Jupyter 4.x, 5.x", "Parameters": [{"name": "autopep8.add_toolbar_button", "description": "Add a toolbar button to prettify the selected cell(s)", "input_type": "checkbox", "default": true}, {"name": "autopep8.button_icon", "description": "Toolbar button icon: a font-awesome class defining the icon used for the\ntoolbar button and actions.\nSee https://fontawesome.com/icons for available icons.\n", "input_type": "text", "default": "fa-cog"}, {"name": "autopep8.button_label", "description": "Toolbar button label text", "input_type": "text", "default": "Code prettify"}, {"name": "autopep8.register_hotkey", "description": "Register hotkeys to prettify the selected code cell(s), or all code cells\nin the notebook\n", "input_type": "checkbox", "default": true}, {"name": "autopep8.hotkeys.process_selected", "description": "Hotkey to use to prettify the selected cell(s)", "input_type": "hotkey", "default": "Alt-A"}, {"name": "autopep8.hotkeys.process_all", "description": "Hotkey to use to prettify the whole notebook", "input_type": "hotkey", "default": "Alt-Shift-A"}, {"name": "autopep8.show_alerts_for_errors", "description": "Show alerts for errors in the kernel prettifying calls", "input_type": "checkbox", "default": true}, {"name": "autopep8.kernel_config_map_json", "description": "json defining library calls required to load the kernel-specific\nprettifying modules, and the prefix & postfix for the json-format string\nrequired to make the prettifying call.\n", "input_type": "textarea", "default": "{\n    \"python\": {\n        \"library\": \"import json\\nimport autopep8\",\n        \"prefix\": \"print(json.dumps(autopep8.fix_code(u\",\n        \"postfix\": \")))\"\n    }\n}\n"}], "require": "code_prettify/autopep8", "Section": "notebook", "readme": "code_prettify/README_autopep8.md"},
		{"Type": "Jupyter Notebook Extension", "Name": "Code prettify", "Description": "Use kernel-specific code to reformat/prettify the contents of code cells", "Link": "README_code_prettify.md", "Main": "code_prettify.js", "Compatibility": "Jupyter 4.x, 5.x", "Parameters": [{"name": "code_prettify.add_toolbar_button", "description": "Add a toolbar button to prettify the selected cell(s)", "input_type": "checkbox", "default": true}, {"name": "code_prettify.button_icon", "description": "Toolbar button icon: a font-awesome class defining the icon used for the\ntoolbar button and actions.\nSee https://fontawesome.com/icons for available icons.\n", "input_type": "text", "default": "fa-legal"}, {"name": "code_prettify.button_label", "description": "Toolbar button label text", "input_type": "text", "default": "Code prettify"}, {"name": "code_prettify.register_hotkey", "description": "Register hotkeys to prettify the selected code cell(s), or all code cells\nin the notebook\n", "input_type": "checkbox", "default": true}, {"name": "code_prettify.hotkeys.process_selected", "description": "Hotkey to use to prettify the selected cell(s)", "input_type": "hotkey", "default": "Ctrl-L"}, {"name": "code_prettify.hotkeys.process_all", "description": "Hotkey to use to prettify the whole notebook", "input_type": "hotkey", "default": "Ctrl-Shift-L"}, {"name": "code_prettify.show_alerts_for_errors", "description": "Show alerts for errors in the kernel prettifying calls", "input_type": "checkbox", "default": true}, {"name": "code_prettify.kernel_config_map_json", "description": "json defining library calls required to load the kernel-specific\nprettifying modules, and the prefix & postfix for the json-format string\nrequired to make the prettifying call.\n", "input_type": "textarea", "default": "{\n  \"python\": {\n    \"library\": \"import json\\ndef yapf_reformat(cell_text):\\n    import yapf.yapflib.yapf_api\\n    import re\\n    cell_text = re.sub('^%', '#%#', cell_text, flags=re.M)\\n    reformated_text = yapf.yapflib.yapf_api.FormatCode(cell_text)[0]\\n    return re.sub('^#%#', '%', reformated_text, flags=re.M)\",\n    \"prefix\": \"print(json.dumps(yapf_reformat(u\",\n    \"postfix\": \")))\"\n  },\n  \"r\": {\n    \"library\": \"library(formatR)\\nlibrary(jsonlite)\",\n    \"prefix\": \"cat(toJSON(paste(tidy_source(text=\",\n    \"postfix\": \", output=FALSE)[['text.tidy']], collapse='\\n')))\"\n  },\n  \"javascript\": {\n    \"library\": \"jsbeautify = require('js-beautify')\",\n    \"prefix\": \"console.log(JSON.stringify(jsbeautify.js_beautify(\",\n    \"postfix\": \")));\"\n  }\n}\n"}], "require": "code_prettify/code_prettify", "Section": "notebook", "readme": "code_prettify/README_code_prettify.md"},
		{"Type": "Jupyter Notebook Extension", "Name": "isort formatter", "Description": "Sort imports in python files using isort", "Link": "README_isort.md", "Main": "isort.js", "Compatibility": "Jupyter 4.x, 5.x", "Parameters": [{"name": "isort.add_toolbar_button", "description": "Add a toolbar button to convert the selected cell(s)", "input_type": "checkbox", "default": true}, {"name": "isort.button_icon", "description": "Toolbar button icon: a font-awesome class defining the icon used for the\ntoolbar button. See https://fontawesome.com/icons for available icons.\n", "input_type": "text", "default": "fa-sort"}, {"name": "isort.button_label", "description": "Toolbar button label text", "input_type": "text", "default": "Sort imports with isort"}, {"name": "isort.kernel_config_map_json", "description": "kernel_config_map_json:\njson defining library calls required to load the kernel-specific\nconverting modules, and the prefix & postfix for the json-format string\nrequired to make the converting call.\n", "input_type": "textarea", "default": "{\n  \"python\": {\n    \"library\": \"import json, isort\\ndef _isort_refactor_cell(src):\\n    try:\\n        tree = isort.SortImports(file_contents=src).output\\n    except Exception:\\n        return src \\n    else:\\n        return str(tree)[:-1]\",\n    \"prefix\": \"print(json.dumps(_isort_refactor_cell(u\",\n    \"postfix\": \")))\"\n  }\n}\n"}], "require": "code_prettify/isort", "Section": "notebook", "readme": "code_prettify/README_isort.md"},
		{"Type": "Jupyter Notebook Extension", "Name": "Codefolding", "Description": "This extension enables the CodeMirror feature to allow codefolding in code cells", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "codefolding_hotkey", "description": "Hotkey to fold/unfold code", "input_type": "hotkey", "default": "Alt-F"}, {"name": "init_delay", "description": "Add a delay before initializing the extension. Useful when the gutter is not being initialized correctly.", "input_type": "number", "min": 0, "default": 0}], "require": "codefolding/main", "Section": "notebook", "readme": "codefolding/readme.md", "icon": "codefolding/icon.png"},
		{"Type": "Jupyter Notebook Extension", "Name": "Codefolding in Editor", "Description": "Enables the CodeMirror feature to allow codefolding in the Jupyter file\neditor view.\nNote that this also uses the codefolding hotkey from the codefolding\nnbextension for the notebook view.\n", "Link": "readme.md", "Icon": "codefolding_editor.png", "Main": "edit.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "init_delay", "description": "Add a delay before initializing the extension. Useful when the gutter is not being initialized correctly.", "input_type": "number", "min": 0, "default": 1000}], "Section": "edit", "require": "codefolding/edit", "readme": "codefolding/readme.md", "icon": "codefolding/codefolding_editor.png"},
		{"Type": "Jupyter Notebook Extension", "Name": "CodeMirror mode extensions", "Description": "Extends some CodeMirror modes with extra features. Currently just adds\nsupport for comment/uncomment and folding for octave/MATLAB mode.\n", "Main": "main.js", "Compatibility": "4.x", "require": "codemirror_mode_extensions/main", "Section": "notebook"},
		{"Type": "Jupyter Notebook Extension", "Compatibility": "4.x, 5.x", "Name": "Collapsible Headings", "Main": "main.js", "Description": "Allows notebook to have collapsible sections, separated by headings", "Link": "readme.md", "Icon": "icon.png", "Parameters": [{"name": "collapsible_headings.add_button", "description": "Add a toolbar button to collapse the closest header cell", "input_type": "checkbox", "default": false}, {"name": "collapsible_headings.add_all_cells_button", "description": "Add a toolbar button to collapse/uncollapse all header cells", "input_type": "checkbox", "default": false}, {"name": "collapsible_headings.add_insert_header_buttons", "description": "Add toolbar buttons to insert heading cells above/below the selected cell", "input_type": "checkbox", "default": false}, {"name": "collapsible_headings.use_toggle_controls", "description": "Add a control in each heading cell's input prompt to collapse/uncollapse it", "input_type": "checkbox", "default": true}, {"name": "collapsible_headings.toggle_color", "description": "Color for the toggle control icon", "input_type": "color", "default": "#aaaaaa"}, {"name": "collapsible_headings.toggle_closed_icon", "description": "font-awesome class for the toggle control icon on collapsed headings", "default": "fa-caret-right"}, {"name": "collapsible_headings.toggle_open_icon", "description": "font-awesome class for the toggle control icon on uncollapsed (expanded) headings", "default": "fa-caret-down"}, {"name": "collapsible_headings.make_toggle_controls_buttons", "description": "Make the toggle control into a button (if false, it's just an icon)", "input_type": "checkbox", "default": false}, {"name": "collapsible_headings.size_toggle_controls_by_level", "description": "Adjust the size of the toggle controls to match their heading levels", "input_type": "checkbox", "default": true}, {"name": "collapsible_headings.show_section_brackets", "description": "show Mathematica-style brackets around each collapsible section", "input_type": "checkbox", "default": false}, {"name": "collapsible_headings.section_bracket_width", "description": "Width, in pixels, of the Mathematica-style brackets around sections", "input_type": "number", "min": 2, "max": 100, "default": 10}, {"name": "collapsible_headings.show_ellipsis", "description": "show a gray bracketed ellipsis at the end of collapsed heading cells", "input_type": "checkbox", "default": true}, {"name": "collapsible_headings.use_shortcuts", "description": "Add command-mode keyboard shortcuts to collapse/uncollapse the selected heading cell", "input_type": "checkbox", "default": true}, {"name": "collapsible_headings.shortcuts.collapse", "description": "Command-mode shortcut to collapse the selected heading cell", "input_type": "hotkey", "default": "left"}, {"name": "collapsible_headings.shortcuts.uncollapse", "description": "Command-mode shortcut to uncollapse (expand) the selected heading cell", "input_type": "hotkey", "default": "right"}, {"name": "collapsible_headings.shortcuts.collapse_all", "description": "Command-mode shortcut to collapse all heading cells", "input_type": "hotkey", "default": "ctrl-shift-left"}, {"name": "collapsible_headings.shortcuts.uncollapse_all", "description": "Command-mode shortcut to uncollapse (expand) all heading cells", "input_type": "hotkey", "default": "ctrl-shift-right"}, {"name": "collapsible_headings.shortcuts.select", "description": "Command-mode shortcut to select all cells in the selected heading cell's section", "input_type": "hotkey", "default": "shift-right"}, {"name": "collapsible_headings.shortcuts.insert_above", "description": "Command-mode shortcut to insert a heading cell above the selected cell", "input_type": "hotkey", "default": "shift-a"}, {"name": "collapsible_headings.shortcuts.insert_below", "description": "Command-mode shortcut to insert a heading cell below the selected cell's section", "input_type": "hotkey", "default": "shift-b"}, {"name": "collapsible_headings.select_reveals", "description": "By default, selecting a whole section also expands the section to reveal its last cell. Set this option to false to disable the expansion.", "input_type": "checkbox", "default": true}, {"name": "collapsible_headings.collapse_to_match_toc", "description": "Collapse/uncollapse notebook sections when the ToC2 nbextension is used to\ncollapse/uncollapse sections in the table of contents. For the inverse\nbehaviour, see ToC2's configuration\n", "input_type": "checkbox", "default": false}, {"name": "collapsible_headings.indent_px", "description": "Shift the collapsible heading controls left by this many pixels per level,\nsuch that more significant headings (lower levels) appear further to the\nleft\n", "input_type": "number", "default": 8}], "require": "collapsible_headings/main", "Section": "notebook", "readme": "collapsible_headings/readme.md", "icon": "collapsible_headings/icon.png"},
		{"Type": "IPython Notebook Extension", "Compatibility": "4.x, 5.x", "Name": "Comment/Uncomment Hotkey", "Main": "main.js", "Description": "add new configurable hotkey binding to toggle comments", "Icon": "icon.png", "Link": "readme.md", "Parameters": [{"name": "comment_uncomment_keybinding", "description": "keybinding for toggling comments", "input_type": "hotkey", "default": "alt-c"}, {"name": "comment_uncomment_indent", "description": "indent comment at current indent level instead of at beginning of line", "default": false, "input_type": "checkbox"}], "require": "comment-uncomment/main", "Section": "notebook", "readme": "comment-uncomment/readme.md", "icon": "comment-uncomment/icon.png"},
		{"Type": "Jupyter Notebook Extension", "Name": "contrib_nbextensions_help_item", "Description": "The contrib_nbextensions_help_item is a tiny extension that just adds an item in the notebook's help menu, pointing to the jupyter_contrib_nbextensions at readthedocs.", "Link": "README.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "require": "contrib_nbextensions_help_item/main", "Section": "notebook", "readme": "contrib_nbextensions_help_item/README.md", "icon": "contrib_nbextensions_help_item/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "datestamper", "Description": "adds a toolbar button which pastes the current time & date into the current cell", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Link": "readme.md", "require": "datestamper/main", "Section": "notebook", "readme": "datestamper/readme.md", "icon": "datestamper/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "Equation Auto Numbering", "Description": "This extension enables equation autonumbering and resetting the equation count.", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "require": "equation-numbering/main", "Section": "notebook", "readme": "equation-numbering/readme.md", "icon": "equation-numbering/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "ExecuteTime", "Description": "Display when each cell has been executed and how long it took", "Link": "readme.md", "Icon": "icon.png", "Main": "ExecuteTime.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "ExecuteTime.clear_timings_on_clear_output", "description": "When cells' outputs are cleared, also clear their timing data, e.g. when\nusing the \"Kernel > Restart & Clear Output\" menu item\n", "input_type": "checkbox", "default": false}, {"name": "ExecuteTime.clear_timings_on_kernel_restart", "description": "Clear all cells' execution timing data on any kernel restart event\n", "input_type": "checkbox", "default": false}, {"name": "ExecuteTime.display_absolute_timings", "description": "Display absolute timings for the start time of execution.\nSetting false will display a relative timestamp like 'a few seconds ago'\n", "default": true, "input_type": "checkbox"}, {"name": "ExecuteTime.display_absolute_format", "description": "The format to use when displaying absolute timings (see above)\n", "default": "YYYY-MM-DD HH:mm:ss", "input_type": "text"}, {"name": "ExecuteTime.relative_timing_update_period", "description": "Seconds to wait between updating the relative timestamps, if using them\n(see above)\n", "default": 10, "input_type": "number", "step": 1, "min": 1, "max": 600}, {"name": "ExecuteTime.display_in_utc", "description": "Display times in UTC, rather than in the local timezone set by the browser\n", "default": false, "input_type": "checkbox"}, {"name": "ExecuteTime.default_kernel_to_utc", "description": "For kernel timestamps which do not specify a timezone, assume UTC\n", "default": true, "input_type": "checkbox"}, {"name": "ExecuteTime.display_right_aligned", "description": "Right-align the text in the timing area under each cell\n", "default": false, "input_type": "checkbox"}, {"name": "ExecuteTime.highlight.use", "description": "Highlight the displayed execution time on completion of execution\n", "default": true, "input_type": "checkbox"}, {"name": "ExecuteTime.highlight.color", "description": "Color to use for highlighting the displayed execution time\n", "default": "#00BB00", "input_type": "color"}, {"name": "ExecuteTime.template.executed", "description": "Template for the timing message for executed cells. See readme for\nreplacement tokens.\n", "default": "executed in ${duration}, finished ${end_time}", "input_type": "text"}, {"name": "ExecuteTime.template.queued", "description": "Template for the timing message for queued cells. See readme for\nreplacement tokens.\n", "default": "execution queued ${start_time}", "input_type": "text"}], "require": "execute_time/ExecuteTime", "Section": "notebook", "readme": "execute_time/readme.md", "icon": "execute_time/icon.png"},
		{"Type": "Jupyter Notebook Extension", "Compatibility": "4.x, 5.x", "Name": "Execution Dependencies", "Main": "execution_dependencies.js", "Link": "README.md", "Description": "Introduce tag annotations to identify each cell and indicate a dependency on others.\nUpon running a cell, its dependencies are run first to prepare all dependencies. \nThen the cell triggered by the user is run as soon as all its dependencies are met.\n", "require": "execution_dependencies/execution_dependencies", "Section": "notebook", "readme": "execution_dependencies/README.md"},
		{"Type": "Jupyter Notebook Extension", "Name": "Exercise", "Description": "Define a group of cells as an \"exercise\".\nThe first cell is the question,\nwhile the rest of the group from the answer or solution.\nThe solution can be hidden/shown by clicking on a widget added to the\nquestion cell.\n", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "add_button", "description": "Add a toolbar button to create/remove an exercise", "input_type": "checkbox", "default": true}, {"name": "use_hotkey", "description": "Add a keyboard shortcut to create/remove an exercise", "input_type": "checkbox", "default": true}, {"name": "hotkey", "description": "Keyboard shortcut optionally used to create/remove an exercise", "input_type": "hotkey", "default": "Alt-D"}], "require": "exercise/main", "Section": "notebook", "readme": "exercise/readme.md", "icon": "exercise/icon.png"},
		{"Type": "Jupyter Notebook Extension", "Name": "Exercise2", "Description": "Define a group of cells as an \"exercise\".\nThe first cell is the question,\nwhile the rest of the group from the answer or solution.\nThe solution can be hidden/shown by clicking on a widget added to the\nquestion cell.\n", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "add_button", "description": "Add a toolbar button to create/remove an exercise", "input_type": "checkbox", "default": true}, {"name": "use_hotkey", "description": "Add a keyboard shortcut to create/remove an exercise", "input_type": "checkbox", "default": true}, {"name": "hotkey", "description": "Keyboard shortcut optionally used to create/remove an exercise", "input_type": "hotkey", "default": "Alt-D"}], "require": "exercise2/main", "Section": "notebook", "readme": "exercise2/readme.md", "icon": "exercise2/icon.png"},
		{"Type": "Jupyter Notebook Extension", "Compatibility": "5.x", "Main": "main.js", "Name": "Export Embedded HTML", "Description": "Export to HTML with images embedded", "Icon": "icon.png", "Link": "readme.md", "require": "export_embedded/main", "Section": "notebook", "readme": "export_embedded/readme.md", "icon": "export_embedded/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "Freeze", "Description": "Freeze cells (forbid editing and executing) or make them read-only", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "Freeze.readonly_color", "description": "Color to use for read-only cell\n", "default": "#fffef0", "input_type": "color"}, {"name": "Freeze.frozen_color", "description": "Color to use for frozen cell\n", "default": "#f0feff", "input_type": "color"}], "require": "freeze/main", "Section": "notebook", "readme": "freeze/readme.md", "icon": "freeze/icon.png"},
		{"Type": "IPython Notebook Extension", "Compatibility": "3.x, 4.x, 5.x", "Name": "Gist-it", "Main": "main.js", "Description": "Adds a button to publish the current notebook as a gist. See the readme for description of the authentication options and relevant parameters.", "Link": "readme.md", "Icon": "icon.png", "Parameters": [{"name": "gist_it_personal_access_token", "description": "(optional) Github personal access token.", "input_type": "text"}, {"name": "gist_it_default_to_public", "description": "Gists default to public. If using a personal access token, gists will default to private. Set this to have them default to being public instead.", "input_type": "checkbox"}], "require": "gist_it/main", "Section": "notebook", "readme": "gist_it/readme.md", "icon": "gist_it/icon.png"},
		{"Type": "IPython Notebook Extension", "Compatibility": "3.x, 4.x, 5.x", "Name": "Help panel", "Main": "help_panel.js", "Icon": "icon.png", "Link": "readme.md", "Description": "Add a toolbar button to display a help panel showing shortcuts to the right side of the notebook", "Parameters": [{"name": "help_panel_add_toolbar_button", "description": "add a toolbar button to open the shortcuts dialog/panel", "input_type": "checkbox", "default": false}], "require": "help_panel/help_panel", "Section": "notebook", "readme": "help_panel/readme.md", "icon": "help_panel/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "Hide Header", "Link": "README.md", "Description": "Toggle visibility of all of header, menubar, toolbar using a hotkey", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "header_toggle", "description": "keybinding for toggling header visibility", "input_type": "hotkey", "default": "ctrl-H"}], "require": "hide_header/main", "Section": "notebook", "readme": "hide_header/README.md"},
		{"Type": "IPython Notebook Extension", "Compatibility": "3.x, 4.x, 5.x", "Main": "main.js", "Name": "Hide input", "Icon": "icon.png", "Description": "toggle display of selected code cell's input", "Link": "readme.md", "require": "hide_input/main", "Section": "notebook", "readme": "hide_input/readme.md", "icon": "hide_input/icon.png"},
		{"Type": "IPython Notebook Extension", "Compatibility": "3.x 4.x 5.x", "Main": "main.js", "Name": "Hide input all", "Description": "toggle display of all code cells' inputs", "Icon": "icon.png", "Link": "readme.md", "require": "hide_input_all/main", "Section": "notebook", "readme": "hide_input_all/readme.md", "icon": "hide_input_all/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "highlighter", "Description": "Enable to highlight select text in a markdown cell", "Link": "readme.md", "Icon": "icon.png", "Main": "highlighter.js", "Compatibility": "3.x, 4.x, 5.x", "require": "highlighter/highlighter", "Section": "notebook", "readme": "highlighter/readme.md", "icon": "highlighter/icon.png"},
		{"Type": "Jupyter Notebook Extension", "Main": "hinterland.js", "Name": "Hinterland", "Link": "README.md", "Description": "Enable code autocompletion menu for every keypress in a code cell, instead of\nonly enabling it with tab\n", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "hinterland.hint_delay", "description": "delay in milliseconds between keypress & hint request. This is used to help\nensure that the character from the keypress is added to the CodeMirror\neditor *before* the hint request checks the character preceding the cursor\nagainst the regexes below.\n", "input_type": "number", "min": 1, "step": 1, "default": 20}, {"name": "hinterland.enable_at_start", "description": "Enable hinterland's continuous hinting when notebook is first opened, or\nif false, only when selected from the help-menu item.\n", "input_type": "checkbox", "default": true}, {"name": "hinterland.hint_inside_comments", "description": "Whether to request hints while typing code comments.\n", "input_type": "checkbox", "default": false}, {"name": "hinterland.exclude_regexp", "description": "exclude_regexp:\nA regular expression tested against the character before the cursor, which,\nif a match occurs, prevents autocompletion from being triggered.\nThis is useful, for example, to prevent triggering autocomplete on a colon,\nwhich  is included by the default Completer.reinvoke pattern.\nIf blank, no test is performed.\nNote that the regex will be created without any flags, making it case\nsensitive.\n", "input_type": "text", "default": ":"}, {"name": "hinterland.include_regexp", "description": "include_regexp:\nA regular expression tested against the character before the cursor, which\nmust match in order for autocompletion to be triggered.\nIf left blank, the value of the notebook's Completer.reinvoke_re parameter\nis used, which can be modified by kernels, but defaults to\n/[%0-9a-z._/\\\\:~-]/i.\nNote that although the Completer.reinvoke_re default is case insensitive by\nvirtue of its /i flag, any regex specified by the user will be created\nwithout any flags, making it case sensitive.\n", "input_type": "text", "default": ""}, {"name": "hinterland.tooltip_regexp", "description": "tooltip_regexp:\nA regular expression tested against the character before the cursor, which\nif it matches, causes a tooltip to be triggered, instead of regular\nautocompletion.\nFor python, this is useful for example for function calls, so the default\nregex matches opening parentheses.\nNote that the regex will be created without any flags, making it case\nsensitive.\n", "input_type": "text", "default": "\\("}], "require": "hinterland/hinterland", "Section": "notebook", "readme": "hinterland/README.md"},
		{"Type": "Jupyter Notebook Extension", "Compatibility": "3.x, 4.x, 5.x", "Name": "Initialization cells", "Main": "main.js", "Icon": "icon.png", "Link": "README.md", "Description": "Add a cell toolbar selector to mark cells as 'initialization' cells. Such\ninitialization cells can be run by on clicking the provided button in the\nmain toolbar, or configurably, run automatically on notebook load.\n", "Parameters": [{"name": "init_cell.run_on_kernel_ready", "description": "Run input cells whenever a kernel_ready.Kernel event is fired. See readme\nfor further details.\n", "input_type": "checkbox", "default": true}], "require": "init_cell/main", "Section": "notebook", "readme": "init_cell/README.md", "icon": "init_cell/icon.png"},
		{"Type": "IPython Notebook Extension", "Compatibility": "4.x, 5.x", "Name": "Keyboard shortcut editor", "Main": "main.js", "Icon": "icon.png", "Link": "README.md", "Description": "Edit or remove Jupyter keyboard shortcuts, or add you own new ones", "Parameters": [{"name": "kse_show_rebinds", "description": "Show shortcut editing controls in the shortcuts dialog. If this is false, shortcuts can't be edited directly from the notebook, but any existing edits are still applied. Useful essentially just to make the shortcuts dialog a bit cleaner", "input_type": "checkbox", "default": true}], "require": "keyboard_shortcut_editor/main", "Section": "notebook", "readme": "keyboard_shortcut_editor/README.md", "icon": "keyboard_shortcut_editor/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "Limit Output", "Description": "This extension limits the number of characters that can be printed below a codecell", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "limit_output", "description": "Number of characters to limit output to", "input_type": "number", "default": 10000, "step": 1, "min": 0}, {"name": "limit_stream", "description": "Enable limiting stream messages", "input_type": "checkbox", "default": true}, {"name": "limit_execute_result", "description": "Enable limiting execute_result messages", "input_type": "checkbox", "default": true}, {"name": "limit_display_data", "description": "Enable limiting display_data messages", "input_type": "checkbox", "default": false}, {"name": "limit_output_message", "description": "Message to append when output is limited", "input_type": "text", "default": "<b>limit_output extension: Maximum message size for {message_type} of {limit_output_length} exceeded with {output_length} characters</b>"}], "require": "limit_output/main", "Section": "notebook", "readme": "limit_output/readme.md", "icon": "limit_output/icon.png"},
		{"Type": "Jupyter Notebook Extension", "Compatibility": "4.x, 5.x", "Name": "Live Markdown Preview", "Main": "livemdpreview.js", "Description": "Live-preview the rendered output of markdown cells while editing their source.\n", "Parameters": [{"name": "livemdpreview.show_side_by_side", "description": "Show the input & output of markdown cells side-by-side while editing them.\nOtherwise, the output appears immediately below the input while editing\n", "input_type": "checkbox", "default": false}, {"name": "livemdpreview.timeout", "description": "Minimum time in ms between editing the markdown source & its output being\nupdated. This throttles the rate at which consecutive renderings will take\nplace.\n", "input_type": "number", "default": 500, "min": 10, "step": 10}], "require": "livemdpreview/livemdpreview", "Section": "notebook"},
		{"Type": "Jupyter Notebook Extension", "Name": "Load TeX macros", "Description": "This extension automatically loads a set of latex commands from the file latexdefs.tex when a notebook is opened.", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "require": "load_tex_macros/main", "Section": "notebook", "readme": "load_tex_macros/readme.md", "icon": "load_tex_macros/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "Move selected cells", "Description": "Move selected cell*s* using keybaord shortcuts Alt-up and Alt-down", "Link": "README.md", "Main": "main.js", "Compatibility": "4.x, 5.x", "require": "move_selected_cells/main", "Section": "notebook", "readme": "move_selected_cells/README.md"},
		{"Type": "IPython Notebook Extension", "Name": "Navigation-Hotkeys", "Description": "Additional hotkeys for easier navigation in the notebook", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "require": "navigation-hotkeys/main", "Section": "notebook", "readme": "navigation-hotkeys/readme.md", "icon": "navigation-hotkeys/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "nbTranslate", "Description": "Helps translate a notebook and/or select the display language.", "Link": "README.md", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "nbTranslate.hotkey", "description": "Converts current cell", "input_type": "hotkey", "default": "Alt-T"}, {"name": "nbTranslate.useGoogleTranslate", "description": "Use Google translate engine\n(it is advised to check the result); otherwise conversion will simply copy the current cell contents.\n", "input_type": "checkbox", "default": true}, {"name": "nbTranslate.sourceLang", "description": "Source language for conversion; see the list of available languages <a href='nbTranslate/languages.js'> here.</a>", "input_type": "text", "default": "en"}, {"name": "nbTranslate.targetLang", "description": "Target language for conversion; see the list of available languages <a href='nbTranslate/languages.js'> here.</a>", "input_type": "text", "default": "fr"}, {"name": "nbTranslate.displayLangs", "description": "Displayed language(s) in the notebook; a list of languages, e.g. ['en', 'fr'] or ['*'] for all", "input_type": "list", "list_element": {"input_type": "text"}, "default": ["en", "fr"]}, {"name": "nbTranslate.langInMainMenu", "description": "Dispay a menu for selecting languages to display (otherwise provides this\nmenu in the configuration toolbar).\n", "input_type": "checkbox", "default": true}], "require": "nbTranslate/main", "Section": "notebook", "readme": "nbTranslate/README.md"},
		{"Type": "IPython Notebook Extension", "Name": "Notify", "Description": "Show a browser notification when kernel becomes idle again after being busy for some time - configurable after 0, 5, 10, or 30 seconds busy.\n", "Link": "readme.md", "Icon": "notification.png", "Main": "notify.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "notify.sticky", "description": "Require interactions on notifications to dismiss them. (Chrome only)", "input_type": "checkbox", "default": false}, {"name": "notify.play_sound", "description": "Play notification sound.", "input_type": "checkbox", "default": false}], "require": "notify/notify", "Section": "notebook", "readme": "notify/readme.md", "icon": "notify/notification.png"},
		{"Type": "IPython Notebook Extension", "Name": "Printview", "Description": "Calls nbconvert and shows the generated output in a new browser tab", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "printview_nbconvert_options", "description": "nbconvert options", "input_type": "string", "default": "--to html"}, {"name": "printview_open_tab", "description": "open a new tab in the browser to display nbconvert output (for html and pdf only)", "input_type": "checkbox", "default": true}], "require": "printview/main", "Section": "notebook", "readme": "printview/readme.md", "icon": "printview/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "Python Markdown", "Description": "Allows embedding Python-code in markdown cells", "Link": "readme.md", "Icon": "python-markdown.png", "Main": "main.js", "Preprocessor": "pymdpreprocessor.py", "Compatibility": "4.x, 5.x", "require": "python-markdown/main", "Section": "notebook", "readme": "python-markdown/readme.md", "icon": "python-markdown/python-markdown.png"},
		{"Type": "IPython Notebook Extension", "Name": "Launch QTConsole", "Link": "README.md", "Description": "Launch a QTConsole attached to the running kernel", "Main": "qtconsole.js", "Compatibility": "4.x", "require": "qtconsole/qtconsole", "Section": "notebook", "readme": "qtconsole/README.md"},
		{"Type": "IPython Notebook Extension", "Name": "Rubberband", "Description": "The rubberband extension allows selecting multiple cells", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "require": "rubberband/main", "Section": "notebook", "readme": "rubberband/readme.md", "icon": "rubberband/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "Ruler", "Description": "This extension enables the Ruler CodeMirror feature", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "ruler_column", "input_type": "list", "list_element": {"input_type": "number"}, "description": "Column where ruler is displayed", "default": [78]}, {"name": "ruler_color", "input_type": "list", "list_element": {"input_type": "color"}, "description": "Ruler color", "default": ["#ff0000"]}, {"name": "ruler_linestyle", "description": "Ruler style, e.g. solid, dashed", "input_type": "list", "default": ["dashed"]}, {"name": "ruler_do_css_patch", "description": "apply css patch for ruler padding bug in notebook >= 4.3", "input_type": "checkbox", "default": true}], "require": "ruler/main", "Section": "notebook", "readme": "ruler/readme.md", "icon": "ruler/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "Runtools", "Description": "Runtools provide a number of additional functions for working with code cells in the IPython notebook", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "5.x", "Parameters": [{"name": "runtools.run_cells_above", "description": "run cells above", "input_type": "hotkey", "default": "Alt-a"}, {"name": "runtools.run_cells_below", "description": "run cells below", "input_type": "hotkey", "default": "Alt-b"}, {"name": "runtools.toggle_marker", "description": "Toggle marker", "input_type": "hotkey", "default": "Alt-t"}, {"name": "runtools.mark_all_codecells", "description": "Mark all codecells", "input_type": "hotkey", "default": "Alt-m"}, {"name": "runtools.unmark_all_codecells", "description": "Unmark all codecells", "input_type": "hotkey", "default": "Alt-u"}, {"name": "runtools.run_marked_cells", "description": "run marked cells", "input_type": "hotkey", "default": "Alt-r"}, {"name": "runtools.stop_execution", "description": "stop execution", "input_type": "hotkey", "default": "Ctrl-c"}, {"name": "runtools.run_all_cells", "description": "run all cells", "input_type": "hotkey", "default": "Alt-x"}, {"name": "runtools.run_alls_cells_ignore_errors", "description": "run all cells - ignore errors", "input_type": "hotkey", "default": "Alt-f"}, {"name": "runtools.marked_color", "description": "Color for marking a codecell\n", "default": "#20f224", "input_type": "color"}, {"name": "runtools.scheduled_color", "description": "Color when a codecell is scheduled to be rund\n", "default": "#00def0", "input_type": "color"}, {"name": "runtools.run_color", "description": "Color while a codecell is being run\n", "default": "#f30a2d", "input_type": "color"}], "require": "runtools/main", "Section": "notebook", "readme": "runtools/readme.md", "icon": "runtools/icon.png"},
		{"Type": "Jupyter Notebook Extension", "Name": "Scratchpad", "Description": "Adds a scratchpad cell to Jupyter notebook.", "Link": "README.md", "Main": "main.js", "Compatibility": "4.x, 5.x", "require": "scratchpad/main", "Section": "notebook", "readme": "scratchpad/README.md"},
		{"Type": "IPython Notebook Extension", "Name": "ScrollDown", "Description": "Scroll outputs down automatically", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "scrollDownIsEnabled", "description": "enable scroll_down toolbar button", "input_type": "checkbox", "default": false}], "require": "scroll_down/main", "Section": "notebook", "readme": "scroll_down/readme.md", "icon": "scroll_down/icon.png"},
		{"Type": "Jupyter Notebook Extension", "Name": "Select CodeMirror Keymap", "Link": "README.md", "Description": "A little extension to choose between CodeMirror keymaps: default, emacs, vim, and sublime", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "select_keymap_line_wrap", "description": "Enable line wrap in CodeMirror", "input_type": "checkbox", "default": true}, {"name": "select_keymap_local_storage", "description": "Store keymap selection on the client instead of server config", "input_type": "checkbox", "default": true}], "require": "select_keymap/main", "Section": "notebook", "readme": "select_keymap/README.md"},
		{"Type": "IPython Notebook Extension", "Name": "SKILL Syntax", "Description": "Enable SKILL syntax support for CodeMirror", "Link": "README.md", "Main": "main.js", "Compatibility": "4.x, 5.x", "require": "skill/main", "Section": "notebook", "readme": "skill/README.md"},
		{"Type": "Jupyter Notebook Extension", "Name": "Skip-Traceback", "Description": "Hide error tracebacks, displaying instead a summary of the error name and\ntype. Clicking the summary displays the whole traceback.\n", "Link": "readme.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x", "Parameters": [{"name": "skip-traceback.animation_duration", "description": "duration (in milliseconds) of the show/hide traceback animations\n", "input_type": "number", "min": 0, "step": 10, "default": 100}, {"name": "skip-traceback.button_icon", "description": "a fontawesome (https://fontawesome.com/icons) class name, used for the\naction and toolbar button.\n", "input_type": "text", "default": "fa-warning"}, {"name": "skip-traceback.show_copy_buttons", "description": "Add buttons to headings to copy the full traceback to the clipboard\n", "input_type": "checkbox", "default": true}, {"name": "skip-traceback.enable", "description": "enable collapsing tracebacks on loading the nbextension\n", "input_type": "checkbox", "default": true}, {"name": "skip-traceback.use_toolbar_button", "description": "add a button to the toolbar which can be used to toggle on or off the\ncontracted display of all cells' tracebacks at once.\n", "input_type": "checkbox", "default": false}], "require": "skip-traceback/main", "Section": "notebook", "readme": "skip-traceback/readme.md", "icon": "skip-traceback/icon.png"},
		{"Type": "IPython Notebook Extension", "Compatibility": "4.x, 5.x", "Name": "Snippets", "Main": "main.js", "Description": "Adds a drop-down menu to insert snippet cells into the current notebook.", "Link": "README.md", "require": "snippets/main", "Section": "notebook", "readme": "snippets/README.md"},
		{"Type": "Jupyter Notebook Extension", "Name": "Snippets Menu", "Link": "readme.md", "Description": "Add a customizable menu item to insert code and markdown snippets.\nComes with extensive defaults for popular python modules, including fairly\ncomplete listings of many important functions and constants, to save\nsearching through documentation.\n", "Main": "main.js", "Icon": "thumbnail.png", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "snippets.insert_as_new_cell", "description": "Insert snippets as new cells, rather than at cursor inside current cell", "input_type": "checkbox", "default": false}, {"name": "snippets.include_custom_menu", "description": "Include custom menu content parsed from JSON string below", "input_type": "checkbox", "default": false}, {"name": "snippets.custom_menu_content", "description": "JSON string parsed to define custom menus (only used if the option above is\nchecked)\n", "input_type": "textarea", "default": "{\n    \"name\" : \"My favorites\",\n    \"sub-menu\" : [\n        {\n            \"name\" : \"Menu item text\",\n            \"snippet\" : [\"import something\",\n                         \"\",\n                         \"new_command(3.14)\",\n                         \"other_new_code_on_new_line('with a string!')\",\n                         \"stringy(\\\"if you need them, escape double quotes with a single backslash\\\")\",\n                         \"backslashy('This \\\\ appears as just one backslash in the output')\",\n                         \"backslashy2('Here \\\\\\\\ are two backslashes')\"]\n        },\n        {\n            \"name\" : \"TeX can be written in menu labels $\\\\alpha_W e\\\\int_0 \\\\mu \\\\epsilon$\",\n            \"snippet\" : [\"another_new_command(2.78)\"]\n        }\n    ]\n}\n"}, {"name": "snippets.sibling_selector", "description": "A JQuery selector for a sibling element next to whose parent element the\nnew menu(s) will be inserted. Other suitable examples include '#file_menu',\n'#edit_menu', '#view_menu', '#insert_menu', '#cell_menu', and\n'#kernel_menu'. To append the new menu as a submenu to the 'insert' menu\nitself, you could use '#insert_menu>:last-child'.\n", "input_type": "text", "default": "#help_menu"}, {"name": "snippets.insert_before_sibling", "description": "Insert the new menu(s) before their sibling (the default value of false\nmeans they are inserted after the sibling)\n", "input_type": "checkbox", "default": false}, {"name": "snippets.top_level_submenu_goes_left", "description": "Snippets menus are often quite big, and positioned at the right side of the\nmenu bar, so by default they open to the left of the menu. Set this to\nfalse to get them to open to the right as normal.\n", "input_type": "checkbox", "default": true}, {"name": "snippets.include_submenu.numpy", "description": "Include numpy sub-menu", "input_type": "checkbox", "default": true}, {"name": "snippets.include_submenu.scipy", "description": "Include scipy sub-menu", "input_type": "checkbox", "default": true}, {"name": "snippets.include_submenu.matplotlib", "description": "Include matplotlib sub-menu", "input_type": "checkbox", "default": true}, {"name": "snippets.include_submenu.sympy", "description": "Include sympy sub-menu", "input_type": "checkbox", "default": true}, {"name": "snippets.include_submenu.pandas", "description": "Include pandas sub-menu", "input_type": "checkbox", "default": true}, {"name": "snippets.include_submenu.astropy", "description": "Include astropy sub-menu", "input_type": "checkbox", "default": true}, {"name": "snippets.include_submenu.h5py", "description": "Include h5py sub-menu", "input_type": "checkbox", "default": true}, {"name": "snippets.include_submenu.numba", "description": "Include numba sub-menu", "input_type": "checkbox", "default": true}, {"name": "snippets.include_submenu.python", "description": "Include python sub-menu", "input_type": "checkbox", "default": true}, {"name": "snippets.include_submenu.markdown", "description": "Include markdown sub-menu", "input_type": "checkbox", "default": true}], "require": "snippets_menu/main", "Section": "notebook", "readme": "snippets_menu/readme.md", "icon": "snippets_menu/thumbnail.png"},
		{"Type": "IPython Notebook Extension", "Compatibility": "4.x, 5.x", "Name": "spellchecker", "Main": "main.js", "Description": "Adds a CodeMirror overlay mode for Typo.js spellchecking", "Link": "README.md", "Parameters": [{"name": "spellchecker.enable_on_load", "input_type": "checkbox", "description": "enable spellchecker for all Markdown/Raw cells on notebook load", "default": true}, {"name": "spellchecker.add_toolbar_button", "input_type": "checkbox", "description": "add a toolbar button to toggle spellchecker on and off for all Markdown/Raw cells", "default": true}, {"name": "spellchecker.lang_code", "intput_type": "text", "description": "language code to use with typo.js", "default": "en_US"}, {"name": "spellchecker.dic_url", "intput_type": "url", "description": "url for the dictionary .dic file to use", "default": "https://cdn.jsdelivr.net/codemirror.spell-checker/latest/en_US.dic"}, {"name": "spellchecker.aff_url", "intput_type": "url", "description": "url for the dictionary .aff file to use", "default": "https://cdn.jsdelivr.net/codemirror.spell-checker/latest/en_US.aff"}], "require": "spellchecker/main", "Section": "notebook", "readme": "spellchecker/README.md"},
		{"Type": "IPython Notebook Extension", "Name": "Split Cells Notebook", "Description": "Enable split cells in Jupyter notebooks", "Main": "splitcell.js", "Link": "readme.md", "Icon": "icon.png", "Compatibility": "Jupyter (4.x, 5.x)", "require": "splitcell/splitcell", "Section": "notebook", "readme": "splitcell/readme.md", "icon": "splitcell/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "table_beautifier", "Link": "README.md", "Description": "Add bootstrap styling to tables in markdown cells and in html/md output", "Main": "main.js", "Compatibility": "4.x, 5.x", "require": "table_beautifier/main", "Section": "notebook", "readme": "table_beautifier/README.md"},
		{"Type": "Jupyter Notebook Extension", "Name": "Table of Contents (2)", "Description": "The toc2 extension enables to collect all running headers and display them in a floating window, as a sidebar or with a navigation menu. The extension is also draggable, resizable, collapsable, dockable and features automatic numerotation with unique links ids, and an optional toc cell.", "Link": "README.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "toc2.number_sections", "description": "Automatically number notebook's sections", "input_type": "checkbox", "default": true}, {"name": "toc2.threshold", "description": "Maximum level of nested sections to display on the tables of contents", "input_type": "number", "min": -1, "step": 1, "default": 4}, {"name": "toc2.skip_h1_title", "description": "Skip h1 headings from numbering, so that they can serve as a notebook title.\nSee the README for details, caveats and alternatives\n", "input_type": "checkbox", "default": false}, {"name": "toc2.toc_cell", "description": "Add a Table of Contents cell at the top of the notebook", "input_type": "checkbox", "default": false}, {"name": "toc2.title_cell", "description": "Default heading used for ToC cell (can also be set per-notebook)", "default": "Table of Contents"}, {"name": "toc2.title_sidebar", "description": "Default title used for ToC sidebar/window (can also be set per-notebook)", "default": "Contents"}, {"name": "toc2.toc_window_display", "description": "Display toc window/sidebar at startup", "input_type": "checkbox", "default": false}, {"name": "toc2.sideBar", "description": "Display Table of Contents as a sidebar (otherwise as a floating window)", "input_type": "checkbox", "default": true}, {"name": "toc2.markTocItemOnScroll", "description": "Mark toc item of header in viewport when scrolling", "input_type": "checkbox", "default": true}, {"name": "toc2.widenNotebook", "description": "Widen the display area to fit the browser window (may be useful with sidebar option)", "input_type": "checkbox", "default": true}, {"name": "toc2.navigate_menu", "description": "Display Table of Contents as a navigation menu", "input_type": "checkbox", "default": true}, {"name": "toc2.moveMenuLeft", "description": "Move notebook's title and menu on the left instead of being centered -- This provides a better look when the toc/sidebar is present", "input_type": "checkbox", "default": true}, {"name": "toc2.collapse_to_match_collapsible_headings", "input_type": "checkbox", "default": false, "description": "Collapse/uncollapse ToC sections when the collapsible_headings nbextension\nis used to collapse/uncollapse sections in the notebook. For the inverse\nbehaviour, see collapsible_headings' configuration\n"}, {"name": "toc2.colors.hover_highlight", "input_type": "color", "description": "Hover color in toc", "default": "#DAA520"}, {"name": "toc2.colors.on_scroll", "input_type": "color", "description": "Color of highlight mark on scrolling", "default": "#2447f0"}, {"name": "toc2.colors.selected_highlight", "input_type": "color", "description": "Color of sections with selected elements", "default": "#FFD700"}, {"name": "toc2.colors.running_highlight", "input_type": "color", "description": "Color of sections with running cells", "default": "#FF0000"}, {"name": "toc2.colors.wrapper_background", "input_type": "color", "description": "Color of wrapper window background", "default": "#FFFFFF"}, {"name": "toc2.colors.sidebar_border", "input_type": "color", "description": "Color of sidebar border", "default": "#EEEEEE"}, {"name": "toc2.colors.navigate_text", "input_type": "color", "description": "Color of navigate text", "default": "#333333"}, {"name": "toc2.colors.navigate_num", "input_type": "color", "description": "Color of navigate number", "default": "#000000"}], "require": "toc2/main", "Section": "notebook", "readme": "toc2/README.md", "icon": "toc2/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "Toggle all line numbers", "Description": "Add a toolbar button and hotkey to toggle all cells' line numbers on or off", "Icon": "icon.png", "Link": "readme.md", "Main": "main.js", "Compatibility": "3.x, 4.x, 5.x", "Parameters": [{"name": "toggle_all_linenumbers_hotkey", "description": "Hotkey combination to which to bind linenumber-toggling", "input_type": "hotkey", "default": "Alt-N"}, {"name": "toggle_all_linenumbers_enable_hotkey", "description": "Enable the hotkey", "input_type": "checkbox", "default": true}], "require": "toggle_all_line_numbers/main", "Section": "notebook", "readme": "toggle_all_line_numbers/readme.md", "icon": "toggle_all_line_numbers/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "Tree Filter", "Description": "An extension that allows you to filter by filename in the Jupyter notebook file tree (aka dashboard) page.", "Link": "readme.md", "Main": "index.js", "Section": "tree", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "filter_keyword", "input_type": "string", "description": "Filter keyword", "default": ""}], "require": "tree-filter/index", "readme": "tree-filter/readme.md"},
		{"Type": "Jupyter Notebook Extension", "Name": "Variable Inspector", "Description": "The Variable Inspector extension collects all defined variables and display them in a floating window. The extension is also draggable, resizable, collapsable.", "Link": "README.md", "Icon": "icon.png", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "varInspector.window_display", "description": "Display window at startup", "input_type": "checkbox", "default": false}, {"name": "varInspector.cols.lenName", "description": "Variable name - Maximum number of characters to display", "input_type": "number", "default": 16}, {"name": "varInspector.cols.lenType", "description": "Variable type - Maximum number of characters to display", "input_type": "number", "default": 16}, {"name": "varInspector.cols.lenVar", "description": "Variable value/content - Maximum number of characters to display", "input_type": "number", "default": 40}, {"name": "varInspector.kernels_config", "description": "json object defining the libraries to load, the delete/remove \nkernel commands to delete a variable, and \nfinally the commands to refresh the list of variables.\n", "input_type": "json_object", "default": "{\n  'python': {\n            library: 'var_list.py',\n            delete_cmd_prefix: 'del ',\n            delete_cmd_postfix: '',\n            varRefreshCmd: 'print(var_dic_list())'\n        },\n  'r': {\n            library: 'var_list.r',\n            delete_cmd_prefix: 'rm(',\n            delete_cmd_postfix: ') ',\n            varRefreshCmd: 'cat(var_dic_list()) '\n        }\n}\n"}], "require": "varInspector/main", "Section": "notebook", "readme": "varInspector/README.md", "icon": "varInspector/icon.png"},
		{"Type": "IPython Notebook Extension", "Name": "zenmode", "Link": "README.md", "Description": "A little extension to give Zenmode functionality to the IPython notebook", "Main": "main.js", "Compatibility": "4.x, 5.x", "Parameters": [{"name": "zenmode_set_zenmode_on_load", "description": "Set zenmode on when a notebook opens", "input_type": "checkbox", "default": true}, {"name": "zenmode_use_builtin_backgrounds", "description": "Use builtin backgrounds in addition to any specified by URL", "input_type": "checkbox", "default": true}, {"name": "zenmode_hide_header", "description": "Hide the header in zenmode", "input_type": "checkbox", "default": true}, {"name": "zenmode_hide_menubar", "description": "Hide the menubar in zenmode", "input_type": "checkbox", "default": true}, {"name": "zenmode_backgrounds", "description": "Urls to use as backgrounds. Any beginning with # are ignored.", "input_type": "list", "list_element": {"input_type": "url"}}], "require": "zenmode/main", "Section": "notebook", "readme": "zenmode/README.md"},
		{"Type": "Jupyter Notebook Extension", "Compatibility": "4.x, 5.x", "Name": "Highlight selected word", "Main": "main.js", "Description": "Enables the CodeMirror addon \"Match Highlighter\"", "Link": "README.md", "Parameters": [{"name": "highlight_selected_word.enable_on_load", "input_type": "checkbox", "default": true, "description": "Enable highlighting on loading the notebook interface.\nThe highlighting can also be toggled from the view menu\n"}, {"name": "highlight_selected_word.highlight_across_all_cells", "input_type": "checkbox", "default": true, "description": "Highlight matches across all cells. If false, only matches within the\ncurrently selected cell will be highlighted.\n"}, {"name": "highlight_selected_word.code_cells_only", "input_type": "checkbox", "default": false, "description": "Only apply highlights to editors for Code cells, not, for example, Markdown\nor Raw cells\n"}, {"name": "highlight_selected_word.highlight_color", "input_type": "color", "default": "#90EE90", "description": "Color used to highlight matching words in the focussed cell"}, {"name": "highlight_selected_word.highlight_color_blurred", "input_type": "color", "default": "#BBFFBB", "description": "Color used to highlight matching words in blurred (non-active) cells"}, {"name": "highlight_selected_word.outlines_only", "input_type": "checkbox", "default": false, "description": "Highlight words using just an outline, rather than the background color\n"}, {"name": "highlight_selected_word.outline_width", "input_type": "number", "default": 1, "min": 0.5, "step": 0.5, "description": "Width, in pixels, of the outline used to highlight words when the\noutline-only setting is selected.\n"}, {"name": "highlight_selected_word.delay", "input_type": "number", "default": 100, "min": 0, "step": 1, "description": "Wait time, in milliseconds, before highlighting the matches"}, {"name": "highlight_selected_word.words_only", "input_type": "checkbox", "default": false, "description": "Only highlight matches if the selected text is a whole word"}, {"name": "highlight_selected_word.highlight_only_whole_words", "input_type": "checkbox", "default": true, "description": "Only highlight matches when they are surrounded by non-word characters, as\ndetermined by the token below (if set), or the default regex '[\\w$]'.\n"}, {"name": "highlight_selected_word.show_token", "input_type": "text", "default": "[\\w$]", "description": "Token (regex) to identify word characters, used to determine what to\nhighlight when nothing is selected. If blank, nothing is highlighted when\nnothing is selected.\n"}, {"name": "highlight_selected_word.min_chars", "input_type": "number", "default": 2, "min": 0, "step": 1, "description": "Minimum number of characters that must be selected for the highlighting\nto occur (assuming no token is set for use when nothing is selected)\n"}, {"name": "highlight_selected_word.trim", "input_type": "checkbox", "default": true, "description": "Trim whitespace from selection text before checking for minimum length\n"}, {"name": "highlight_selected_word.use_toggle_hotkey", "input_type": "checkbox", "default": false, "description": "Bind the highlight_selected_word:toggle action to a hotkey\n"}, {"name": "highlight_selected_word.toggle_hotkey", "input_type": "hotkey", "default": "alt-h", "description": "Hotkey to bind to the highlight_selected_word:toggle action (if selected\nfor use, above)\n"}, {"name": "highlight_selected_word.only_cells_in_scroll", "input_type": "checkbox", "default": true, "description": "Only apply highlights to editors which are visible in the scrolled view.\nThis may offer performance benefits for larger notebooks\n"}, {"name": "highlight_selected_word.scroll_min_delay", "input_type": "number", "default": 100, "min": 0, "step": 10, "description": "Minimum delay in ms between updating highlights on scrolling the notebook\n(used only if limiting highlights to those in scrolled view, see above).\nIf set to zero, no update is done on scroll.\n"}, {"name": "highlight_selected_word.hide_selections_in_unfocussed", "input_type": "checkbox", "default": false, "description": "Hide any text selection in non-focussed cells (can be confused with match highlights).\n"}], "require": "highlight_selected_word/main", "Section": "notebook", "readme": "highlight_selected_word/README.md"},
		{"Type": "IPython Notebook Extension", "Name": "(some) LaTeX environments for Jupyter", "Description": "Enable to use laTeX environments in Jupyter's markdown cells", "Link": "README.md", "Icon": "icon.png", "Main": "latex_envs.js", "Compatibility": "Jupyter (4.x, 5.x)", "Parameters": [{"name": "latex_envs.LaTeX_envs_menu_present", "description": "LaTeX_envs menu (insert environments) present", "input_type": "checkbox", "default": true}, {"name": "latex_envs.eqLabelWithNumbers", "description": "Label equation with numbers (otherwise with their \\label{} key)", "input_type": "checkbox", "default": true}, {"name": "latex_envs.report_style_numbering", "description": "Number environments as section.num", "input_type": "checkbox", "default": false}, {"name": "latex_envs.autocomplete", "description": "Automatically complete LaTeX commands while typing", "input_type": "checkbox", "default": true}, {"name": "latex_envs.autoclose", "description": "Automatically close '$$, '()', '{}', '[]' while typing", "input_type": "checkbox", "default": false}, {"name": "latex_envs.user_envs_cfg", "description": "Use customized environments as given in 'user_envs.json' (in the extension directory)", "input_type": "checkbox", "default": false}, {"name": "latex_envs.bibliofile", "description": "BibTeX filename (in current directory)", "input_type": "text", "default": "biblio.bib"}, {"name": "latex_envs.hotkeys.equation", "description": "Hotkey used to insert equation environment", "input_type": "hotkey", "default": "Ctrl-E"}, {"name": "latex_envs.hotkeys.itemize", "description": "Hotkey used to insert itemize environment", "input_type": "hotkey", "default": "Ctrl-I"}], "require": "latex_envs/latex_envs", "Section": "notebook", "readme": "latex_envs/README.md", "icon": "latex_envs/icon.png"},
		{"Type": "Jupyter Notebook Extension", "Name": "Nbextensions dashboard tab", "Description": "An nbextension that renders the nbextensions configurator interface as a dashboard tab.", "Link": "readme.md", "Main": "main.js", "Section": "tree", "Compatibility": "4.x, 5.x", "tags": ["configurator", "dashboard", "tree", "tab"], "require": "nbextensions_configurator/tree_tab/main", "readme": "nbextensions_configurator/tree_tab/readme.md"},
		{"Type": "Jupyter Notebook Extension", "Name": "Nbextensions edit menu item", "Description": "Add an edit-menu item to open the nbextensions configurator page", "Main": "main.js", "Compatibility": "4.x, 5.x", "Icon": "icon.png", "tags": ["configurator", "menu"], "require": "nbextensions_configurator/config_menu/main", "Section": "notebook", "icon": "nbextensions_configurator/config_menu/icon.png"}])
});

module.exports = router;
